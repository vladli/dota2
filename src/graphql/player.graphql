query GetPlayerBySteamId($steamAccountId: Long!) {
  player(steamAccountId: $steamAccountId) {
    steamAccountId
    steamAccount {
      profileUri
      timeCreated
      name
      avatar
      isDotaPlusSubscriber
      isAnonymous
      isStratzPublic
      seasonRank
      seasonLeaderboardRank
      proSteamAccount {
        id
        name
        realName
        isLocked
        isPro
        totalEarnings
        team {
          id
          name
          tag
        }
      }
    }
    matchCount
    winCount
    matches(request: { take: 25 }) {
      id
      players(steamAccountId: $steamAccountId) {
        isVictory
        heroId
        hero {
          displayName
          shortName
        }
        lane
        position
        role
      }
    }
  }
}

query GetPlayerMatches($steamAccountId: Long!, $take: Int!, $skip: Int) {
  player(steamAccountId: $steamAccountId) {
    matches(request: { take: $take, skip: $skip }) {
      id
      didRadiantWin
      durationSeconds
      endDateTime
      lobbyType
      gameMode
      actualRank
      bottomLaneOutcome
      midLaneOutcome
      topLaneOutcome
      players(steamAccountId: $steamAccountId) {
        hero {
          id
          shortName
          displayName
        }
        isVictory
        kills
        deaths
        assists
        lane
        role
        partyId
        level
      }
    }
  }
}

query GetMostPlayedHeroes(
  $steamAccountId: Long!
  $take: Int!
  $gameVersionId: Short!
) {
  player(steamAccountId: $steamAccountId) {
    steamAccountId
    matchCount
    heroesGroupBy: matchesGroupBy(
      request: { playerList: SINGLE, groupBy: HERO, take: $take }
    ) {
      ... on MatchGroupByHeroType {
        heroId
        hero(gameVersionId: $gameVersionId) {
          id
          displayName
          shortName
        }
        winCount
        matchCount
        avgGoldPerMinute
        avgExperiencePerMinute
        lastMatchDateTime
        avgAssists
        avgKills
        avgDeaths
        __typename
      }
      __typename
    }
    dotaPlus {
      heroId
      level
      __typename
    }
  }
}

query GetPlayerActivityStats(
  $steamAccountId: Long!
  $heroStatsByDayRequest: PlayerMatchesGroupByRequestType!
  $statsByHourRequest: PlayerMatchesGroupByRequestType!
) {
  player(steamAccountId: $steamAccountId) {
    steamAccountId
    firstMatchDate
    matchCount
    winCount
    statsByDay: matchesGroupBy(request: $heroStatsByDayRequest) {
      ... on MatchGroupByDateDayHeroType {
        dateDay
        heroId
        matchCount
        winCount
        __typename
      }
    }
    statsByHour: matchesGroupBy(request: $statsByHourRequest) {
      ... on MatchGroupByHourType {
        hour
        matchCount
        winCount
        __typename
      }
    }
  }
}

query GetPlayerDotaPlus($steamAccountId: Long!) {
  player(steamAccountId: $steamAccountId) {
    steamAccountId
    steamAccount {
      profileUri
      timeCreated
      name
      avatar
      isDotaPlusSubscriber
      isAnonymous
      seasonRank
      seasonLeaderboardRank
      proSteamAccount {
        id
        name
        realName
        team {
          id
          name
          tag
        }
      }
    }
    dotaPlus {
      heroId
      level
    }
  }
}
